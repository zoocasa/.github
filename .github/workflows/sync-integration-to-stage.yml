name: Sync Stage Image Between Clusters

on:
  workflow_dispatch:
    inputs:
      service_list:
        description: 'Comma-separated list of services to sync'
        required: true
        type: string
      dry_run:
        description: 'If true, only show what would be changed without making any changes'
        required: false
        type: boolean
        default: false

env:
  AWS_REGION: us-east-1
  SOURCE_CLUSTER: zoocasa-stage-two
  TARGET_CLUSTER: zoocasa-stage

jobs:
  sync-image:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig for source cluster
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.SOURCE_CLUSTER }}

      - name: Get current images from source cluster
        id: get_images
        run: |
          IFS=',' read -ra SERVICES <<< "${{ github.event.inputs.service_list }}"
          for service in "${SERVICES[@]}"; do
            IMAGE=$(kubectl get deployment $service -n stage -o jsonpath='{.spec.template.spec.containers[0].image}')
            echo "Found image for $service: $IMAGE"
            echo "$service=$IMAGE" >> images.txt
          done
          echo "images=$(cat images.txt)" >> $GITHUB_OUTPUT

      - name: Update kubeconfig for target cluster
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.TARGET_CLUSTER }}

      - name: Get current target images
        id: get_target_images
        run: |
          IFS=',' read -ra SERVICES <<< "${{ github.event.inputs.service_list }}"
          for service in "${SERVICES[@]}"; do
            TARGET_IMAGE=$(kubectl get deployment $service -n stage -o jsonpath='{.spec.template.spec.containers[0].image}')
            echo "Current target image for $service: $TARGET_IMAGE"
            echo "$service=$TARGET_IMAGE" >> target_images.txt
          done
          echo "target_images=$(cat target_images.txt)" >> $GITHUB_OUTPUT

      - name: Update images in target cluster
        if: ${{ github.event.inputs.dry_run == false }}
        run: |
          IFS=',' read -ra SERVICES <<< "${{ github.event.inputs.service_list }}"
          for service in "${SERVICES[@]}"; do
            echo "Updating $service..."
            SOURCE_IMAGE=$(grep "^$service=" <<< "${{ steps.get_images.outputs.images }}" | cut -d'=' -f2)
            kubectl set image deployment/$service \
              -n stage \
              $service=$SOURCE_IMAGE
          done

      - name: Show planned changes (dry run)
        if: ${{ github.event.inputs.dry_run == true }}
        run: |
          IFS=',' read -ra SERVICES <<< "${{ github.event.inputs.service_list }}"
          for service in "${SERVICES[@]}"; do
            SOURCE_IMAGE=$(grep "^$service=" <<< "${{ steps.get_images.outputs.images }}" | cut -d'=' -f2)
            TARGET_IMAGE=$(grep "^$service=" <<< "${{ steps.get_target_images.outputs.target_images }}" | cut -d'=' -f2)
            echo "DRY RUN: Would update $service in ${{ env.TARGET_CLUSTER }}"
            echo "From: $TARGET_IMAGE"
            echo "To: $SOURCE_IMAGE"
            echo "---"
          done 